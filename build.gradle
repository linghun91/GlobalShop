plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group 'cn.i7mc'

// 版本管理
def versionFile = file('version.properties')
def currentVersion = '1.4.0.9'

// 读取当前版本
if (versionFile.exists()) {
    def props = new Properties()
    versionFile.withInputStream { props.load(it) }
    currentVersion = props.getProperty('version', '1.4.0.9')
}

// 自动迭代版本号
def getNextVersion(String currentVer) {
    def versionParts = currentVer.split('\\.')
    if (versionParts.length == 4) {
        def major = versionParts[0] as int
        def minor = versionParts[1] as int
        def patch = versionParts[2] as int
        def build = versionParts[3] as int

        // 迭代版本号：第四位+1
        build++

        return "${major}.${minor}.${patch}.${build}"
    }
    return currentVer
}

// 获取新版本号并立即更新
def newVersion = getNextVersion(currentVersion)

// 更新 version.properties
def props = new Properties()
props.setProperty('version', newVersion)
versionFile.withOutputStream { props.store(it, 'Auto-incremented version') }

// 设置项目版本为新版本
version newVersion

// 更新 plugin.yml 中的版本
def updatePluginYmlVersionAtInit(String ver) {
    def pluginYmlFile = file('src/main/resources/plugin.yml')
    if (pluginYmlFile.exists()) {
        def content = pluginYmlFile.getText('UTF-8')
        def updatedContent = content.replaceAll(/(?m)^version:\s*['"]?[^'"]*['"]?/, "version: '${ver}'")
        pluginYmlFile.setText(updatedContent, 'UTF-8')
        println "plugin.yml 版本已更新为: ${ver}"
    }
}

updatePluginYmlVersionAtInit(newVersion)
println "版本已从 ${currentVersion} 更新到 ${newVersion}"

repositories {
    mavenCentral()
    maven { url 'https://repo.papermc.io/repository/maven-public/' }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.20.1-R0.1-SNAPSHOT'
    compileOnly files('libs/Vault.jar')
    compileOnly files('libs/PlayerPoints.jar')
    compileOnly 'mysql:mysql-connector-java:8.0.33'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.fork = true
    // 移除Java可执行文件路径，让Gradle使用org.gradle.java.home设置
}

// 处理资源文件
processResources {
    // 设置重复文件处理策略
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

shadowJar {
    archiveClassifier.set('')
    // 禁用minimize，以确保所有资源文件都被包含
    // minimize()

    // 设置重复文件处理策略
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // 确保web目录下的文件被包含在JAR中
    from('src/main/resources') {
        include 'web/**'
        include 'config.yml'
        include 'message.yml'
        include 'debugmessage.yml'
        include 'hd_gui.yml'
    }
}

tasks.build.dependsOn tasks.shadowJar